@page "/"
@using NamozVaqtlari.Data
@using NamozVaqtlari.Services
@inject PrayerService PrayerService

@if(isLocationDanied)
{
    <MudTable Class="pa-2 ma-2" Items="prayerTimes?.Keys"  Hover="true" Breakpoint="Breakpoint.None" Bordered="true">
        <ToolBarContent>
            <MudText style="font-weight: bold;" Typo="Typo.h6">Viloyatlar bo'yicha namoz vaqtlari</MudText>
            <MudSpacer />
            <MudIconButton Icon="fas fa-mosque" Color="Color.Primary" />
        </ToolBarContent>
        <HeaderContent >
            <MudTh style="font-weight: bold;">Viloyat</MudTh>
            <MudTh style="font-weight: bold;">Tong</MudTh>
            <MudTh style="font-weight: bold;">Quyosh</MudTh>
            <MudTh style="font-weight: bold;">Peshin</MudTh>
            <MudTh style="font-weight: bold;">Asr</MudTh>
            <MudTh style="font-weight: bold;">Shom</MudTh>
            <MudTh style="font-weight: bold;">Xufton</MudTh>
        </HeaderContent>
        <RowTemplate>
            <MudTd DataLabel="Viloyat">@context</MudTd>
            <MudTd DataLabel="Tong">@prayerTimes[context]?.Data?.Timings?.Fajr</MudTd>
            <MudTd DataLabel="Quyosh">@prayerTimes[context].Data?.Timings?.Sunrise</MudTd>
            <MudTd DataLabel="Peshin">@prayerTimes[context].Data?.Timings?.Dhuhr</MudTd>
            <MudTd DataLabel="Asr">@prayerTimes[context].Data?.Timings?.Asr</MudTd>
            <MudTd DataLabel="Shom">@prayerTimes[context].Data?.Timings?.Maghrib</MudTd>
            <MudTd DataLabel="Xufton">@prayerTimes[context].Data?.Timings?.Isha</MudTd>
        </RowTemplate>
    </MudTable>
}
else
{
    <MudTable Class="pa-2 ma-2" Hover="true" Breakpoint="Breakpoint.None" Items="prayerTimesList" Bordered="true">
        <ToolBarContent>
            <MudStack Spacing="1">
                <MudText Color="Color.Primary">@currentDate</MudText>

            </MudStack>
        </ToolBarContent>
        <HeaderContent>
            <MudTh Style="font-weight: bold;">Namozlar</MudTh>
            <MudTh Style="font-weight: bold;">Vaqtlar</MudTh>
        </HeaderContent>
        <RowTemplate>
            <MudTd Style="padding:8px">@context.Name</MudTd>
            <MudTd Style="padding:8px">@context.Time</MudTd>
        </RowTemplate>
        <FooterContent>
            <MudText Color="Color.Primary" Typo="Typo.caption" Style="margin-left: 6px;">
                Sizning manzilingiz:<br />
                @LocationName
            </MudText>
        </FooterContent>
    </MudTable>
}


@code {
    private bool isLocationDanied = false;
    private string? errorMessage;
    private Dictionary<string, PrayerResponse>? prayerTimes;

    private PrayerResponse? prayerLocation;
    private string? LocationName;

    private async Task RequestLocation()
    {
        try
        {
            prayerLocation = await PrayerService.RequestLocation();
            isLocationDanied = false;
            errorMessage = null;
        }
        catch (Exception ex)
        {
            isLocationDanied = true;
            errorMessage = "Geolokatsiyaga ruxsat berilmadi. Barcha viloyatlar uchun namoz vaqtlari taqdim etilmoqda";
            prayerTimes = await PrayerService.GetAllPrayerTimes();
        }
    }

    protected override async Task OnInitializedAsync()
    {
        await RequestLocation();
        UpdateCurrentDate();

        Timer timer = new Timer(state =>
        {
            InvokeAsync(() =>
    {
    UpdateCurrentDate();
    StateHasChanged();
            });
        },
        null,
        TimeSpan.Zero,
        TimeSpan.FromDays(1));

        if (!isLocationDanied && prayerLocation != null)
        {
            LocationName = await GetLocationName(prayerLocation.Data.Meta.Latitude, prayerLocation.Data.Meta.Longitude);
        }
    }

    private async Task<string?> GetLocationName(double latitude, double longitude)
    {
        string url = $"https://nominatim.openstreetmap.org/reverse?format=json&lat={latitude}&lon={longitude}";


        using var httpClient = new HttpClient();
        var response = await httpClient.GetFromJsonAsync<LocationResponse>(url);

        if (response?.Address != null)
        {
            var city = response.Address.City ?? response.Address.Town ?? response.Address.Village;
            var state = response.Address.State;
            var country = response.Address.Country;

            return $"{state}, {country}";
        }
        return "Joylashuv aniqlanmadi";
    }

    private List<(string Name, string Time)> prayerTimesList => GetPrayerTimesList();

    private List<(string Name, string Time)> GetPrayerTimesList()
    {
        if (prayerLocation?.Data?.Timings == null)
            return new List<(string, string)>();

        var prayerTimesList = new List<(string Name, string Time)>
{
("Tong", prayerLocation.Data.Timings.Fajr ?? "N/A"),
("Quyosh", prayerLocation.Data.Timings.Sunrise ?? "N/A"),
("Peshin", prayerLocation.Data.Timings.Dhuhr ?? "N/A"),
("Asr", prayerLocation.Data.Timings.Asr ?? "N/A"),
("Shom", prayerLocation.Data.Timings.Maghrib ?? "N/A"),
("Xufton", prayerLocation.Data.Timings.Isha ?? "N/A")
};

        return prayerTimesList;


    }
    private string? currentDate;

    private void UpdateCurrentDate()
    {
        currentDate = DateTimeOffset.Now.ToString("dd MMM yyyy", new System.Globalization.CultureInfo("en-EN"));
    }
}
